#!/usr/bin/env python
# -*- coding: utf-8 -*-

PACKAGE='rowi'

from math import pi

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
angles = gen.add_group("Angles")
angles.add("min_ang",           double_t, SensorLevels.RECONFIGURE_STOP,
           "The angle of the first range measurement. The unit depends on ~ang_radians.",
           -pi/2,-pi, pi)
angles.add("max_ang",           double_t, SensorLevels.RECONFIGURE_STOP,
           "The angle of the first range measurement. The unit depends on ~ang_radians.",
            pi/2, -pi, pi)

group2 = gen.add_group("Group2")

group2.add("group2_param1",           double_t, SensorLevels.RECONFIGURE_STOP,
           "The angle of the first range measurement. The unit depends on ~ang_radians.",
           -pi/2,-pi, pi)
group2.add("group2_param2",           double_t, SensorLevels.RECONFIGURE_STOP,
           "The angle of the first range measurement. The unit depends on ~ang_radians.",
            pi/2, -pi, pi)


gen.add("intensity",            bool_t,   SensorLevels.RECONFIGURE_STOP,
        "Whether or not the hokuyo returns intensity values.",
         False)
gen.add("cluster",              int_t,    SensorLevels.RECONFIGURE_STOP,
        "The number of adjacent range measurements to cluster into a single reading",
         1, 0, 99)
gen.add("skip",                 int_t,    SensorLevels.RECONFIGURE_STOP,
        "The number of scans to skip between each measured scan",
         0, 0,  9)
gen.add("port",                 str_t,    SensorLevels.RECONFIGURE_CLOSE,
        "The serial port where the hokuyo device can be found",
        "/dev/ttyACM0")
gen.add("calibrate_time",       bool_t,   SensorLevels.RECONFIGURE_CLOSE,
        "Whether the node should calibrate the hokuyo's time offset",
         True)
gen.add("frame_id",             str_t,    SensorLevels.RECONFIGURE_RUNNING,
        "The frame in which laser scans will be returned",
        "laser")
gen.add("time_offset",          double_t, SensorLevels.RECONFIGURE_RUNNING,
        "An offet to add to the timestamp before publication of a scan",
         0, -0.25, 0.25)
gen.add("allow_unsafe_settings",bool_t,   SensorLevels.RECONFIGURE_CLOSE,
        "Turn this on if you wish to use the UTM-30LX with an unsafe angular range. Turning this option on may cause occasional crashes or bad data. This option is a tempory workaround that will hopefully be removed in an upcoming driver version.",
         False)

size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                     "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "rowi_test", "Test"))
